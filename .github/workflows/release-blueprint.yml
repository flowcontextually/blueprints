name: Release Blueprint Package

on:
  push:
    tags:
      - "*-*-v*"

jobs:
  build-and-release:
    name: Build and Release Blueprint
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        # We need the code to be on disk to find and zip the directory.
        uses: actions/checkout@v4

      - name: Parse tag and set up variables
        id: vars
        shell: bash
        run: |
          TAG=${{ github.ref_name }}
          NAMESPACE=$(echo $TAG | sed -E 's/^([a-zA-Z0-9-]+)-([a-zA-Z0-9-]+)-v[0-9\.-]+$/\1/')
          NAME=$(echo $TAG | sed -E 's/^([a-zA-Z0-9-]+)-([a-zA-Z0-9-]+)-v[0-9\.-]+$/\2/')
          VERSION=$(echo $TAG | sed -E 's/^([a-zA-Z0-9-]+)-([a-zA-Z0-9-]+)-(v[0-9\.-]+)$/\3/')

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "release_name=Blueprint: ${NAMESPACE}/${NAME}@${VERSION}" >> $GITHUB_OUTPUT
          echo "blueprint_path=${NAMESPACE}/${NAME}/${VERSION}" >> $GITHUB_OUTPUT
          echo "asset_name=${NAME}.zip" >> $GITHUB_OUTPUT

      - name: Verify blueprint directory exists
        run: |
          if [ ! -d "${{ steps.vars.outputs.blueprint_path }}" ]; then
            echo "Error: Directory for tag '${{ github.ref_name }}' not found at '${{ steps.vars.outputs.blueprint_path }}'"
            exit 1
          fi

      # --- THIS IS THE CRITICAL STEP ---
      - name: Create Zip Archive of the specific blueprint
        shell: bash
        run: |
          # We navigate into the directory containing the namespace (e.g., 'system/')
          # and then zip the target directory (e.g., 'mssql/v0.1.0').
          # This creates a zip file that contains the blueprint's content at the root.
          cd ${{ steps.vars.outputs.namespace }}
          zip -r ../${{ steps.vars.outputs.asset_name }} . -i "${{ steps.vars.outputs.name }}/${{ steps.vars.outputs.version }}/*"
      # --- END CRITICAL STEP ---
      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: ${{ steps.vars.outputs.release_name }}
          # This `files` key is what uploads our custom zip file as a release asset.
          files: ${{ steps.vars.outputs.asset_name }}
